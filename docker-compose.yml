services:
  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - location-service
      - user-service
      - search-service
    networks:
      - movie-reco-net

  location-service:
    build:
      context: .
      dockerfile: ./location-service/Dockerfile
    ports:
      - "9001:9001"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - movie-reco-net

  user-service:
    build:
      context: .
      dockerfile: ./user-service/Dockerfile
    ports:
      - "9002:9002"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - movie-reco-net

  search-service:
    build:
      context: .
      dockerfile: ./search-service/Dockerfile
    ports:
      - "9005:9005"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - movie-reco-net

  crawler:
    build:
      context: .
      dockerfile: ./crawler/Dockerfile
    environment:
      SERP_API_KEY: '9dc14c3ae6901ba9fbc7e0257594425557b53a2399fda39f89ec67c074df9a56'
      TMDB_API_KEY: 'eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3ODg1YzczNjY0ZjNmOWQzZTJlNmE0MTk2Mzk4OThhYiIsIm5iZiI6MTczMTI0NTE2OS4zMjc1MzY4LCJzdWIiOiI2NzAyZjhmOWM5YTEwZDQ2ZWE3ZDY1MjQiLCJzY29wZXMiOlsiYXBpX3JlYWQiXSwidmVyc2lvbiI6MX0.ZZFm-ZIzekTr6eAvYtKb1kMPtbaIYFLModGsY7PDsFg'
      SPRING_AMQP_DESERIALIZATION_TRUST_ALL: "True"
    ports:
      - "9003:9003"
    depends_on:
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    volumes:
      - ../data:/data # Path to the data folder. Need to be created before running the docker-compose
    networks:
      - movie-reco-net

  reco-service:
    build:
      context: .
      dockerfile: ./reco-service/Dockerfile
    environment:
      MOVIE_RECO_BASE_URL: http://localhost:9007
    ports:
      - "9006:9006"
    networks:
      - movie-reco-net

  postgres:
    image: postgres
    restart: always
    environment:
      POSTGRES_HOST: localhost
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: locations,users
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1s
      timeout: 5s
      retries: 10
    ports:
      - "5432:5432"
    volumes:
      - ./config:/docker-entrypoint-initdb.d
    networks:
      - movie-reco-net

  mongodb:
    image: mongodb/mongodb-community-server:6.0-ubi8
    healthcheck:
      test: [ "CMD","mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 5s
      timeout: 5s
      retries: 3
      start_period: 5s
    environment:
      - MONGO_INITDB_ROOT_USERNAME=user
      - MONGO_INITDB_ROOT_PASSWORD=pass
    ports:
      - "27017:27017"
    volumes:
      - type: bind
        source: ../data # Path to the data folder. Need to be created before running the docker-compose
        target: /data/db/v6
    networks:
      - movie-reco-net

  rabbitmq:
    build:
      context: .
      dockerfile: Dockerfile.rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: com-movie-recommender-user
      RABBITMQ_DEFAULT_PASS: com-movie-recommender-password
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
      - ./config/init.sh:/etc/rabbitmq/init.sh

    networks:
      - movie-reco-net

networks:
  movie-reco-net:
    driver: bridge

volumes:
  mongodb_data_container:
  rabbitmq_data:
  rabbitmq_logs: